import { createElement } from 'react';
import {
  createBaseApp,
  initAppLifeCycles,
  emitLifeCycles,
  <% if (router) {%>
  getSearchParams,
  initHistory,
  createHistory,
  <% } %>
} from 'create-app-shared';
import reactAppRenderer, { RenderAppConfig } from 'react-app-renderer';

<% if (globalStyle) {%>
  // eslint-disable-next-line
  import '../../<%= globalStyle %>'
<% } %>
import loadStaticModules from '<%- tempPath %>/core/loadStaticModules';
import loadRuntimeModules from '<%- tempPath %>/core/loadRuntimeModules';

import { setAppConfig } from '<%- tempPath %>/core/appConfig';
import { IAppConfig, IBuildConfig } from '<%- tempPath %>/types';

const buildConfig: IBuildConfig = <%- buildConfig %>;
const frameworkAppBase = createBaseApp({
  loadRuntimeModules,
  createElement,
  runtimeAPI: {
    <% if (router) {%>
    createHistory,
    getSearchParams,
    <% } %>
  },
});

export function runApp(appConfig: IAppConfig = {}) {
  // store appConfig in case of server side render
  // server bundle will to get appConfig after run runApp
  setAppConfig(appConfig as IAppConfig);
  // load static modules before init runtime such as request
  loadStaticModules(appConfig as IAppConfig);
  if (process.env.__IS_SERVER__) return;
  <% if (router) {%>
  // set History before GID
  initHistory(appConfig as any);
  <% } %>
  reactAppRenderer({
    appConfig: appConfig as RenderAppConfig,
    buildConfig,
    appLifecycle: {
      createBaseApp: frameworkAppBase,
      initAppLifeCycles,
      emitLifeCycles,
    },
  });
};
