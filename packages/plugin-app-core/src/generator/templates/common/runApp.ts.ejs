import { createElement, useEffect, Component } from '<%- framework %>';
import { isMiniApp, isWeChatMiniProgram, isByteDanceMicroApp, isWeb } from 'universal-env';
import miniappRenderer from 'miniapp-renderer';
import createShareAPI, { history } from 'create-app-shared';

<% if (isReact) {%>
  import reactAppRenderer, { getInitialData } from 'react-app-renderer';
  import { withRouter as defaultWithRouter } from 'react-router';
  import genWithSearchParams from './genWithSearchParams';
<% } %>

<% if (isRax) {%>
  import raxAppRenderer from 'rax-app-renderer';
  import { createWithRouter } from 'create-use-router';
  const defaultWithRouter = createWithRouter({ createElement });
<% } %>

<% if (globalStyle) {%>
  // eslint-disable-next-line
  import '../<%= globalStyle %>'
<% } %>

import loadRuntimeModules from './loadRuntimeModules';
import loadStaticModules from './loadStaticModules';
import defaultStaticConfig from './staticConfig';

import { setAppConfig } from './appConfig';
import { mount, unmount } from './render';
import ErrorBoundary from './ErrorBoundary';

const {
  createBaseApp,
  withRouter,
  createHistory,
  getHistory,
  emitLifeCycles,
  usePageShow,
  usePageHide,
  withPageLifeCycle,
  pathRedirect,
  registerNativeEventListeners,
  addNativeEventListener,
  removeNativeEventListener,
  getSearchParams
} = createShareAPI({
  createElement,
  useEffect,
  withRouter: defaultWithRouter
}, loadRuntimeModules);

export function runApp(appConfig, staticConfig?: any) {
  let renderer;
  <% if(isRax){ %>
    renderer = raxAppRenderer;
  <% } %>
  if ((isMiniApp || isWeChatMiniProgram || isByteDanceMicroApp) && !isWeb) {
    renderer = miniappRenderer;
  }<% if(isReact){ %> else {
    renderer = reactAppRenderer;
  }
  <% } %>
  const buildConfig = <%- buildConfig %>;
  renderer({
    appConfig,
    staticConfig: staticConfig || defaultStaticConfig,
    buildConfig,
    setAppConfig,
    createBaseApp,
    createHistory,
    getHistory,
    emitLifeCycles,
    pathRedirect,
    loadStaticModules,
    ErrorBoundary
  }, {
    createElement,
    mount,
    unmount,
    Component
  })
};

<% if (isReact) {%>
  const useSearchParams = () => {
    // @deprecated
â€‹    console.warn('Detected that you are using useSearchParams, please use getSearchParams method, Visit https://ice.work/docs/guide/basic/api.');
    return getSearchParams();
  };
  const withSearchParams = genWithSearchParams(getSearchParams);
<% } %>

// Public API
export {
  // router api
  withRouter,
  history,
  getHistory,
  getSearchParams,
<% if (isReact) {%>
  useSearchParams,
  withSearchParams,
  getInitialData,
<% } %>
  // LifeCycles api
  usePageShow,
  usePageHide,
  withPageLifeCycle,

  // events api
  registerNativeEventListeners,
  addNativeEventListener,
  removeNativeEventListener,

  ErrorBoundary
};

// Private API
export default {
  createBaseApp,
  emitLifeCycles
}
