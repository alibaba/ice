import { createElement, useEffect <% if(isRax){ %>, Component<% } %> } from '<%- framework %>';
import {
  createBaseApp,
  getSearchParams,
  history,
  getHistory,
  createUsePageLifeCycle,
  initAppLifeCycles,
  withPageLifeCycle,
  emitLifeCycles,
<% if (buildConfig.router !== false) {%>
  initHistory,
  createHistory,
<% } %>
} from 'create-app-shared';
<% if (isReact) {%>import reactAppRenderer, { getInitialData, RenderAppConfig } from 'react-app-renderer';
<% if (buildConfig.router !== false) {%>import { withRouter } from 'react-router';<% } %>
import genWithSearchParams from './genWithSearchParams';<% } %>
<% if (isRax && hasTabBar) {%>
import TabBar from './TabBar';
<% } %>
<% if (isRax) {%>
  import { isMiniApp, isWeChatMiniProgram, isByteDanceMicroApp, isBaiduSmartProgram, isKuaiShouMiniProgram, isWeb } from 'universal-env';
  import miniappRenderer from 'miniapp-renderer';
  import raxAppRenderer, { getInitialData } from 'rax-app-renderer';
  import { createWithRouter } from 'create-use-router';
  const defaultWithRouter = createWithRouter({ createElement });
<% } %>
<% if (globalStyle) {%>
  // eslint-disable-next-line
  import '../../<%= globalStyle %>'
<% } %>
import loadStaticModules from './loadStaticModules';
import loadRuntimeModules from './loadRuntimeModules';
<% if (isRax) {%>
import defaultStaticConfig from './staticConfig';
import { mount, unmount } from './render';
<% } %>
import { setAppConfig } from './appConfig';
import ErrorBoundary from './ErrorBoundary';
import { IAppConfig, IBuildConfig } from '../types';

const buildConfig: IBuildConfig = <%- buildConfig %>;
const { usePageShow, usePageHide } = createUsePageLifeCycle({ useEffect });
const frameworkAppBase = createBaseApp({
  loadRuntimeModules,
  createElement,
  runtimeAPI: {
    <% if (buildConfig.router !== false) {%>
    createHistory,
    <% } %>
    getSearchParams,
  },
});

export function runApp(appConfig?: IAppConfig<% if(isRax){ %>, staticConfig?: any<% } %>) {  
  <% if(isRax){ %>
    // TODO type of renderer
    let renderer;
    renderer = raxAppRenderer;
    if ((isMiniApp || isWeChatMiniProgram || isByteDanceMicroApp || isBaiduSmartProgram || isKuaiShouMiniProgram) && !isWeb) {
      renderer = miniappRenderer;
    }
    renderer({
      appConfig,
      staticConfig: staticConfig || defaultStaticConfig,
      buildConfig,
      setAppConfig,
      createBaseApp: frameworkAppBase,
      createHistory,
      getHistory,
      setHistory,
      emitLifeCycles,
      pathRedirect,
      loadStaticModules,
      ErrorBoundary,
      <% if(isRax && hasTabBar){ %>
      TabBar,
      <% } %>
    }, {
      createElement,
      mount,
      unmount,
      Component
    })
  <% } %>
  <% if(isReact){ %>
    // store appConfig in case of server side render
    // server bundle will to get appConfig after run runApp
    setAppConfig(appConfig as IAppConfig);
    // load static modules before init runtime such as request
    loadStaticModules(appConfig as IAppConfig);
    if (process.env.__IS_SERVER__) return;
    <% if (buildConfig.router !== false) {%>
    // set History before GID
    initHistory(appConfig as any);
    <% } %>
    reactAppRenderer({
      appConfig: appConfig as RenderAppConfig,
      buildConfig,
      ErrorBoundary,
      appLifecycle: {
        createBaseApp: frameworkAppBase,
        initAppLifeCycles,
        emitLifeCycles,
      },
    });
  <% } %>
};

export function createApp(appConfig?: IAppConfig<% if(isRax){ %>, staticConfig?: any<% } %>) {
  console.warn(
    'Detected that you are using createApp, please use runApp method, Visit https://ice.work/docs/guide/basic/api.'
  );
  runApp(appConfig<% if(isRax){ %>, staticConfig<% } %>);
}

<% if (isReact) {%>
  const useSearchParams = () => {
    // @deprecated
â€‹    console.warn('Detected that you are using useSearchParams, please use getSearchParams method, Visit https://ice.work/docs/guide/basic/api.');
    return getSearchParams();
  };
  const withSearchParams = genWithSearchParams(getSearchParams);
<% } %>

// Public API
export {
  // router api
<% if (buildConfig.router !== false) {%>
  withRouter,
  history,
  getHistory,
<% } %>
  getSearchParams,
<% if (isReact) {%>
  useSearchParams,
  withSearchParams,
<% } %>
  getInitialData,
  // LifeCycles api
  usePageShow,
  usePageHide,
  withPageLifeCycle,
  <% if(isRax){ %>
  // events api
  registerNativeEventListeners,
  addNativeEventListener,
  removeNativeEventListener,
  <% } %>
  ErrorBoundary,
};

// Private API
export default {
  createBaseApp: frameworkAppBase,
  emitLifeCycles
}
