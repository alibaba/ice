<% if(!hasJsxRuntime) { %>
  import * as React from 'react';
<% } %>
import { createContext, useContext, useState } from 'react';
import Cookies from 'universal-cookie';
<% if (i18nRouting !== false) {%>
import { history } from 'create-app-shared';
import getDetectedLocaleFromPathname from './utils/getDetectedLocaleFromPathname';
<% } %>

const LOCALE_COOKIE_KEY = '<%= LOCALE_COOKIE_KEY %>';
const localeConfig = <%- JSON.stringify(localeConfig) %>;

const { defaultLocale, locales } = localeConfig;

const Context = createContext<any>(null);

export const LocaleProvider = ({ children }) => {
  const [activeLocale, setActiveLocale] = useState<string>(() => getLocale());

  function setLocale(locale: string) {
    setLocaleToCookies(locale);
    setActiveLocale(locale);
  }

  return (
    <Context.Provider value={[activeLocale, setLocale]}>
      {children}
    </Context.Provider>
  )
}

export function useLocale(): [string, React.Dispatch<React.SetStateAction<string>>] {
  return useContext(Context)
}

export function getDefaultLocale(): string {
  return defaultLocale
}

export function getAllLocales(): string[] {
  return locales
}

<% if (i18nRouting !== false) {%>
function getDetectedLocaleFromPath(locales: string[]) {
  if (history === null) {
    console.log('history is null, can\'t get current locale from pathname');
    return;
  }
  const { location: { pathname } } = history;

  return getDetectedLocaleFromPathname(pathname, locales);
}
<% } %>

export function getLocale(): string {
  return new Cookies().get(LOCALE_COOKIE_KEY) ||
    <% if (i18nRouting !== false) {%>
      getDetectedLocaleFromPath(locales) ||
    <% } %>
    defaultLocale
}

function setLocaleToCookies(locale: string) {
  const cookies = new Cookies();
  cookies.set(LOCALE_COOKIE_KEY, locale, { path: '/' });
}
