<% if(!hasJsxRuntime) { %>
  import * as React from 'react';
<% } %>
import { FC, createContext, useContext, useState } from 'react';
import { history } from 'create-app-shared';
import Cookies from 'universal-cookie';

const LOCALE_COOKIE_KEY = '<%= LOCALE_COOKIE_KEY %>';

const Context = createContext<any>(null);

interface Props {
  value: string;
}

const LocaleProvider: FC<Props> = ({ value: defaultLocale, children }) => {
  const [activeLocale, setActiveLocale] = useState<string>(() => getLocale());

  function setLocale(locale: string) {
    setLocaleToCookies(locale);
    redirect(locale);
    setActiveLocale(locale);
  }
  return (
    <Context.Provider value={[activeLocale, setLocale]}>
      {children}
    </Context.Provider>
  )
}

function useLocale(): [string, React.Dispatch<React.SetStateAction<string>>] {
  return useContext(Context)
}

function getDefaultLocale(): string {
  return '<%= defaultLocale %>'
}

function getAllLocales(): string[] {
  return <%- JSON.stringify(locales) %>
}

/**
 * 获取当前页面的语言
 */
function getLocale(): string {
  if (history === null) {
    return '';
  }
  <% if (localeRoute === false) {%>
    const cookies = new Cookies();
    return cookies.get(LOCALE_COOKIE_KEY);
  <% } else { %>
    const { location: { pathname } } = history;
    const pathnameParts = pathname.split('/').filter(pathnamePart => pathnamePart);
    let currentLocale: string = '<%= defaultLocale %>';
    // eslint-disable-next-line no-restricted-syntax
    for (const locale of <%- JSON.stringify(locales) %>) {
      if (pathnameParts[0] === locale) {
        currentLocale = locale;
        break;
      }
    }
    return currentLocale;
  <% } %>
}

function setLocaleToCookies(locale: string) {
  const cookies = new Cookies();
  cookies.set(LOCALE_COOKIE_KEY, locale, { path: '/' });
}

function redirect(locale: string) {
  if (!history) {
    console.error('history is null');
  }

  const { location: { pathname } } = history;
  let subPathnames = pathname.split('/').filter((item: string) => item);

  if (locale === '<%= defaultLocale %>') {
    subPathnames = subPathnames.slice(1);
  } else {
    subPathnames[0] = locale;
  }

  const newPathname = subPathnames.join('/') || '/';
  history.push(newPathname);
}

export { 
  useLocale, 
  LocaleProvider,
  getDefaultLocale,
  getAllLocales,
  getLocale,
  setLocaleToCookies,
};