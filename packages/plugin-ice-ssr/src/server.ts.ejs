<% if (importEnv) { %>
import './env';
<% } %>
import '@/app';
import { join } from 'path';
import { pathToRegexp } from '@ice/runtime';
import * as cheerio from 'cheerio';
import * as queryString from 'query-string';
import { Helmet } from 'react-helmet';
import { matchPath } from 'ice';
import { setInitialData } from 'react-app-renderer';
import reactAppRendererWithSSR from 'react-app-renderer/lib/server';
import { InitialContext, ServerContext } from 'react-app-renderer/lib/types';
import { getAppConfig } from '../../core/appConfig';
import loadStaticModules from '../../core/loadStaticModules';
import { emitLifeCycles } from '../../core/publicAPI';
import { setHistory } from '../../core/routerAPI';
import app from '../../core/runApp';
<% if (enableRouter) { %>
import routes from '<%- routesPath %>/routes';
<% } else { %>
const routes = [];
<% } %>
import loadable from '@loadable/component';
import * as chalk from 'chalk';
import parseurl from 'parseurl';

const { createBaseApp, initAppLifeCycles } = app;

// appConfig set by: import '@/app'
const appConfig = getAppConfig();

interface GenerateHtml {
  htmlTemplateContent: string;
  loadableComponentExtractor?: any;
  helmet?: any;
  bundleContent?: string;
  pageInitialProps?: any;
  initialData?: any;
  error?: Error;
}

const serverRender = async (context: ServerContext, opts = {}) => {
  let options;
  if (context.req) {
    options = { ctx: context, ...opts }
  } else {
    options = { ...context }
  }
  let {
    ctx = {},
    pathname,
    initialData,
    htmlTemplate,
    loadableStatsPath,
    pagesData = [],
    publicPath,
  } = options;

  if (process.env.NODE_ENV === 'development' && loadableStatsPath !== false) {
    // loadable-stats.json will be generated to the build dir in development
    loadableStatsPath = join(process.cwd(), '<%- outputDir %>', 'loadable-stats.json');
  }
  const buildConfig = {
    loadableStatsPath, 
    publicPath, 
    i18n: <%- JSON.stringify(typeof i18n === 'undefined' ? {} : i18n) %>,
  }
  const htmlTemplateContent = htmlTemplate || 'global.__ICE_SERVER_HTML_TEMPLATE__';

  // load module to run before createApp ready
  loadStaticModules(appConfig);

  const { req, res } = ctx as any;
  let initialContext: InitialContext = { pathname, location: { pathname } };
  if (req) {
    const { search, hash, path, pathname } = parseurl(req);
    const parsedQuery = queryString.parse(search);
    const history = {
      location: { pathname, search, hash, state: null },
    };
    initialContext = {
      req,
      res,
      pathname,
      query: parsedQuery,
      path,
      location: history.location,
    };
  }

  if (process.env.NODE_ENV === 'development') {
    return renderStatic({ htmlTemplateContent, initialContext, initialData, buildConfig });
  }
  const pageData = pagesData.find(({ path, exact: end = false, strict = false, sensitive = false }) => {
    try {
      const regexp = (pathToRegexp.default || pathToRegexp)(path, [], { end, strict, sensitive });
      return regexp.test(initialContext.pathname);
    } catch (e) {
      return false;
    }
  });
  if (pageData) {
    // enable pre-render pages
    const { html, ssr } = pageData;
    // @deprecated
    // will not supported in the future because there are too few cases.
    if (ssr) {
      return renderStatic({ htmlTemplateContent, initialContext, initialData, buildConfig });
    }
    return { html };
  }
  return renderStatic({ htmlTemplateContent, initialContext, initialData, buildConfig });
}

export async function renderStatic(
  { 
    htmlTemplateContent, 
    initialContext, 
    buildConfig,
    initialData, 
    component,
    getInitialProps
 }: {
    htmlTemplateContent: string;
    initialContext: Record<string, any>;
    buildConfig: Record<string, any>;
    initialData?: Record<string, any>;
    component?: any;
    getInitialProps?: Function;
 }
 ) {
  let error;
  let html = htmlTemplateContent;

  try {
    // update history in sever side
    const history = { location: initialContext.location };
    setHistory(history);

    // get initial data
    if (!initialData) {
      const getInitialData = appConfig.app && appConfig.app.getInitialData;
      if (getInitialData) {
        console.log('[SSR]', 'getting initial data of app', initialContext.pathname);
        initialData = await getInitialData(initialContext);
      }
    }

    // set initial data
    setInitialData(initialData);

    // get page initial props
    if (!component) {
      const result = await getComponentByPath(
        routes,
        initialContext.pathname,
      );
      component = result.component;
      getInitialProps = result.getInitialProps;
    }

    let pageInitialProps = {};
    if (getInitialProps) {
      console.log('[SSR]', 'getting initial props of page component', initialContext.pathname);
      pageInitialProps = await getInitialProps(initialContext);
    }

    // generate bundle content and register global variables in html
    console.log('[SSR]', 'generating html content', initialContext.pathname);
    const { bundleContent, loadableComponentExtractor } =
      reactAppRendererWithSSR(
        {
          enableRouter: <%- enableRouter %>,
          initialContext,
          initialData,
          pageInitialProps,
        },
        {
          appConfig,
          buildConfig,
          appLifecycle: { createBaseApp, emitLifeCycles, initAppLifeCycles },
        }
      );

    const helmet = Helmet.renderStatic();

    html = generateHtml({
      htmlTemplateContent,
      loadableComponentExtractor,
      helmet,
      bundleContent,
      initialData,
      pageInitialProps,
    });
  } catch (e) {
    error = e;
    html = generateHtml({
      htmlTemplateContent,
      error,
    });
    logError('[SSR] generate html template error message: ' + error.message);
    logError('[SSR] generate html template error stack: ' + error.stack);
  }

  return { html, error, redirectUrl: initialContext.url };
}

export function generateHtml({
  htmlTemplateContent,
  loadableComponentExtractor,
  helmet,
  bundleContent,
  initialData,
  pageInitialProps,
  error
 }: GenerateHtml) {
  const $ = cheerio.load(htmlTemplateContent, { decodeEntities: false });
  if (error) {
    $('head').append(`
      <script>
        window.__ICE_SSR_ERROR__ = "${(error instanceof Error ? error.message : error).replace(/\"/g, '\'')}";
      </script>`)
    return $.html();
  }
  $(`#${appConfig?.app?.rootId || 'ice-container'}`).append(bundleContent);
  $('head').append(`<script>
    window.__ICE_SSR_ENABLED__=true;
    window.__ICE_APP_DATA__=${JSON.stringify(initialData)};
    window.__ICE_PAGE_PROPS__=${JSON.stringify(pageInitialProps)};
  </script>`);
  // inject assets
  if (loadableComponentExtractor) {
    $('head').append(`${loadableComponentExtractor.getLinkTags()}`);
    $('head').append(`${loadableComponentExtractor.getStyleTags()}`);
    $('body').append(`${loadableComponentExtractor.getScriptTags()}`);
  }
  // inject tags to header
  $('head').append(`${helmet.title.toString()}`);
  $('head').append(`${helmet.meta.toString()}`);
  $('head').append(`${helmet.link.toString()}`);
  $('head').append(`${helmet.script.toString()}`);

  return $.html();
}

export async function getComponentByPath(routes, currPath)  {
  <% if (enableRouter) { %>
    async function findMatchRoute(routeList) {
      let matchedRoute = routeList.find(route => {
        return matchPath(currPath, route);
      });
      if (matchedRoute?.component?.__LOADABLE__) {
        matchedRoute.component = loadable(matchedRoute.component.dynamicImport);
      }
      if (matchedRoute) {
        return matchedRoute.children ? await findMatchRoute(matchedRoute.children) : matchedRoute;
      }
    }
    const routeData = await findMatchRoute(routes);
    if (routeData?.component && routeData?.component?.load) {
      const loadedPageComponent = await routeData.component.load();
      routeData.component = loadedPageComponent.default;
    }
    return {
      component: routeData?.component,
      getInitialProps: routeData?.getInitialProps || routeData?.component?.getInitialProps,
    };
  <% } else { %>
    const matchedComponent = appConfig?.app?.renderComponent;

    if (!matchedComponent) {
      throw new Error('未指定需要渲染的页面组件!');
    }
    return {
      component: matchedComponent,
      getInitialProps: matchedComponent.getInitialProps
    }
  <% } %>
}

function logError(msg) {
  console.log(
    chalk.red('ERR!'),
    chalk.magenta(msg),
  );
}

export default serverRender;
