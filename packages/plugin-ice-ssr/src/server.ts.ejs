import '@/app';
import { join } from 'path';
import * as cheerio from 'cheerio';
import * as queryString from 'query-string';
import { Helmet } from 'react-helmet';
import { matchPath } from 'ice';
import { setInitialData } from 'react-app-renderer';
import reactAppRendererWithSSR from 'react-app-renderer/lib/server';
import { getAppConfig } from './appConfig';
import loadStaticModules from './loadStaticModules';
import app from './runApp';
import routes from '<%- routesPath %>/routes';
import loadable from '@loadable/component';

const chalk = require('chalk');
const parseurl = require('parseurl');
const { createBaseApp, emitLifeCycles } = app;

// appConfig set by: import '@/app'
const appConfig = getAppConfig();

const serverRender = async (context, opts = {}) => {
  let options;
  if (context.req) {
    options = { ctx: context, ...opts }
  } else {
    options = { ...context }
  }
  let {
    ctx = {},
    pathname: originPathname,
    initialData,
    htmlTemplate,
    loadableStatsPath,
    publicPath = '/'
  } = options;

  if (process.env.NODE_ENV === 'development') {
    // loadable-stats.json will be genreated to the build dir in development
    loadableStatsPath = join(process.cwd(), '<%- outputDir %>', 'loadable-stats.json');
  }
  const buildConfig = { loadableStatsPath, publicPath };

  const htmlTemplateContent = htmlTemplate || `__ICE_SERVER_HTML_TEMPLATE__`;
  // get html template
  const $ = cheerio.load(htmlTemplateContent, { decodeEntities: false });

  // load module to run before createApp ready
  loadStaticModules(appConfig);

  let pageInitialProps;
  let error;

  const { req, res } = ctx as any;

  const { search, hash, path, pathname: parsedPathname } = parseurl(req);
  const pathname = originPathname || parsedPathname;

  const parsedQuery = queryString.parse(search);
  const initialContext = {
    req,
    res,
    pathname,
    query: parsedQuery,
    path,
    location: { pathname, search, hash, state: null },
  }

  try {
    // get initial data
    if (!initialData) {
      const getInitialData = appConfig.app && appConfig.app.getInitialData;
      if (getInitialData) {
        console.log('[SSR]', 'getting initial data of app');
        initialData = await getInitialData(initialContext);
      }
    }

    // set initial data
    setInitialData(initialData);

    // get page initial props
    let PageComponent = await getComponentByPath(routes, pathname);
    if (PageComponent && PageComponent.load) {
      const loadedPageComponent = await PageComponent.load();
      PageComponent = loadedPageComponent.default;
    }
    const getInitialProps = PageComponent && PageComponent.getInitialProps;
    if (getInitialProps) {
      console.log('[SSR]', 'getting initial props of page component');
      pageInitialProps = await getInitialProps(initialContext);
    }

    // generate bundle content and register global variables in html
    console.log('[SSR]', 'generating html content');
    const { bundleContent, loadableComponentExtractor } = reactAppRendererWithSSR({
      initialContext,
      initialData,
      pageInitialProps
    }, {
      appConfig,
      buildConfig,
      createBaseApp,
      emitLifeCycles
    });

    const helmet = Helmet.renderStatic();

    $('#ice-container').append(bundleContent);
    $('head').append(`<script>
      window.__ICE_SSR_ENABLED__=true;
      window.__ICE_APP_DATA__=${JSON.stringify(initialData)};
      window.__ICE_PAGE_PROPS__=${JSON.stringify(pageInitialProps)};
    </script>`);
    // lazy load bundle
    $('head').append(`${loadableComponentExtractor.getLinkTags()}`);
    $('head').append(`${loadableComponentExtractor.getStyleTags()}`);
    $('body').append(`${loadableComponentExtractor.getScriptTags()}`);
    // react-helmet
    $('head').append(`${helmet.title.toString()}`);
    $('head').append(`${helmet.meta.toString()}`);
    $('head').append(`${helmet.link.toString()}`);
    $('head').append(`${helmet.script.toString()}`);
  } catch (e) {
    error = e;
    $('head').append(`
    <script>
      window.__ICE_SSR_ERROR__ = "${(error instanceof Error ? error.message : error).replace(/\"/g, '\'')}";
    </script>`)
    logError('[SSR] generate html template error');
  }

  const html = $.html();
  return { html, error, redirectUrl: initialContext.url };
}

async function getComponentByPath(routes, currPath)  {
  async function findMatchRoute(routeList) {
    let matchedRoute = routeList.find(route => {
      return matchPath(currPath, route);
    });
    if (matchedRoute?.component?.__LOADABLE__) {
      matchedRoute.component = loadable(matchedRoute.component.dynamicImport);
    }
    if (matchedRoute) {
      return matchedRoute.children ? await findMatchRoute(matchedRoute.children) : matchedRoute;
    }
  }
  const matchedRoute = await findMatchRoute(routes);
  return matchedRoute && matchedRoute.component;
}

function logError(msg) {
  console.log(
    chalk.red('ERR!'),
    chalk.magenta(msg),
  );
}

export default serverRender;
