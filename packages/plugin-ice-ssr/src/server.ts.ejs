import '@/app';
import * as cheerio from 'cheerio';
import { matchPath } from 'ice';
import { reactAppRendererWithSSR } from 'react-app-renderer';
import { getAppConfig } from './appConfig';
import loadStaticModules from './loadStaticModules';
import app from './runApp';
import routes from '@/routes';

const chalk = require('chalk');
const { createBaseApp, emitLifeCycles } = app;

// appConfig set by: import '@/app'
const appConfig = getAppConfig();

const serverRender = async ({ context, pathname, initialData, htmlTemplate }) => {
  // get html template
  const $ = cheerio.load(htmlTemplate || `__ICE_SERVER_HTML_TEMPLATE__`);

  // load module to run before createApp ready
  loadStaticModules(appConfig);

  let pageInitialProps;
  let error;

  try {
    // get initial data
    if (!initialData) {
      const getInitialData = appConfig.app && appConfig.app.getInitialData;
      if (getInitialData) {
        console.log('[SSR]', 'getting initial data of app');
        initialData = await getInitialData();
      }
    }

    // get page initial props
    const PageComponent = getComponentByPath(routes, pathname);
    const getInitialProps = PageComponent && PageComponent.getInitialProps;
    if (getInitialProps) {
      console.log('[SSR]', 'getting initial props of page component');
      pageInitialProps = await getInitialProps();
    }

    // generate bundle content and register global variables in html
    console.log('[SSR]', 'generating html content');
    const bundleContent = reactAppRendererWithSSR({
      staticContext: context,
      pathname,
      initialData,
      pageInitialProps
    }, {
      appConfig,
      createBaseApp,
      emitLifeCycles
    });
    $('#ice-container').append(bundleContent);
    $('head').append(`<script>
      window.__ICE_SSR_ENABLED__=true;
      window.__ICE_APP_DATA__=${JSON.stringify(initialData)};
      window.__ICE_PAGE_PROPS__=${JSON.stringify(pageInitialProps)};
    </script>`)
  } catch (e) {
    error = e;
    logError('[SSR] generate html template error');
  }

  const html = $.html();
  return { html, error };
}

function getComponentByPath(routes, currPath)  {
  function findMatchRoute(routeList) {
    const matchedRoute = routeList.find(route => {
      return matchPath(currPath, route);
    });
    return matchedRoute.children ? findMatchRoute(matchedRoute.children) : matchedRoute;
  }
  const matchedRoute = findMatchRoute(routes);
  return matchedRoute && matchedRoute.component;
}

function logError(msg) {
  console.log(
    chalk.red('ERR!'),
    chalk.magenta(msg),
  );
}

export default serverRender;
