// reference： https://github.com/bvaughn/react-error-boundary
/* eslint @typescript-eslint/explicit-member-accessibility:0 */
import { createElement, RaxNode, ComponentType, Component } from 'rax';
import ErrorBoundaryFallback from './ErrorBoundaryFallback';

interface IProps {
  children?: RaxNode;
  Fallback?: ComponentType<any>;
  onError?: Function;
};

interface IState {
  error?: Error | null
};

class ErrorBoundary extends Component<IProps, IState> {
  static defaultProps: IProps = {
    Fallback: ErrorBoundaryFallback,
  };

  constructor(props) {
    super(props);
    this.state = {
      error: null
    };
  }

  componentDidCatch(error: Error): void {
    const { onError } = this.props;

    if (typeof onError === 'function') {
      try {
        // can’t reproduce missing info in development environment.
        onError.call(this, error);
      } catch (ignoredError) {
        // ignored error
      }
    }

    // Update state so the next render will show the fallback UI.
    this.setState({ error });
  }

  render() {
    const { children, Fallback } = this.props;
    const { error } = this.state;
    // render fallback UI if there is error
    if (error !== null && typeof Fallback === 'function') {
      return <Fallback error={error} />
    }

    return children || null;
  }
}

export default ErrorBoundary;
