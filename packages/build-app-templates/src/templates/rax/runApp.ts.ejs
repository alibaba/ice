import { createElement } from 'rax';
import {
  createBaseApp,
  initAppLifeCycles,
  emitLifeCycles,
<% if (buildConfig.router !== false) {%>
  initHistory,
  createHistory,
<% } %>
} from 'create-app-shared';

<% if (tabBarPath) {%>
import TabBar from '<%- tabBarPath %>';
<% } %>
import { isMiniApp, isWeChatMiniProgram, isByteDanceMicroApp, isBaiduSmartProgram, isKuaiShouMiniProgram, isWeb, isNode } from 'universal-env';
import miniappRenderer from 'miniapp-renderer';
import raxAppRenderer, { RenderAppConfig }  from 'rax-app-renderer';
<% if (globalStyle) {%>
// eslint-disable-next-line
import '<%= globalStyle %>';
<% } %>
import loadStaticModules from '<%- relativeCorePath %>/loadStaticModules';
import loadRuntimeModules from './loadRuntimeModules';

import { setAppConfig } from '<%- relativeCorePath %>/appConfig';
import ErrorBoundary from '<%- relativeCorePath %>/ErrorBoundary';
import { IAppConfig, IBuildConfig, IStaticConfig, IRuntimeValue } from '<%- typesPath  %>';
import { mount, unmount } from '<%- relativeCorePath %>/render';
import defaultStaticConfig from '<%- relativeCorePath %>/staticConfig';

let staticConfig: IStaticConfig = defaultStaticConfig;

const inMiniApp = (isMiniApp || isWeChatMiniProgram || isByteDanceMicroApp || isBaiduSmartProgram || isKuaiShouMiniProgram) && !isWeb;
const buildConfig: IBuildConfig = <%- JSON.stringify(buildConfig) %>;
const runtimeValue: IRuntimeValue = {};

<% if (tabBarPath) {%>
if (!inMiniApp) {
  runtimeValue.TabBar = TabBar;
  runtimeValue.tabBarConfig = <%- isMPA ? JSON.stringify('') : 'staticConfig?.tabBar' %>;
}
<% } %>
const frameworkAppBase = createBaseApp({
  loadRuntimeModules,
  createElement,
  runtimeAPI: {
    <% if (buildConfig.router !== false) {%>
    createHistory,
    <% } %>
  },
  runtimeValue,
});

<% if (typeof pageConfig !== 'undefined') {%>
const pageConfig = <%- JSON.stringify(pageConfig) %>;
<% } %>

export function runApp(appConfig?: IAppConfig, <% if (buildConfig.router !== false) {%>customStaticConfig?: IStaticConfig<% } %>) {
  // server bundle will to get appConfig after run runApp
  setAppConfig(appConfig as IAppConfig);
  // load static modules before init runtime such as request
  loadStaticModules(appConfig as IAppConfig);

  if (process.env.__IS_SERVER__ || isNode) return;

  <% if (buildConfig.router !== false) {%>
  if (customStaticConfig) {
    staticConfig = customStaticConfig;
  }
  // set History before GID
  initHistory && initHistory(appConfig as any, { staticConfig });
  <% }  else if (typeof pageConfig !== 'undefined') { %>
    appConfig.renderComponent.__pageConfig = pageConfig;
  <% } %>

  let renderer;
  if (inMiniApp) {
    renderer = miniappRenderer;
  } else {
    renderer = raxAppRenderer;
  }
  renderer({
    appConfig: appConfig as RenderAppConfig,
    buildConfig,
    staticConfig,
    ErrorBoundary,
    appLifecycle: {
      createBaseApp: frameworkAppBase,
      initAppLifeCycles,
      emitLifeCycles,
    },
    <% if (typeof pageConfig !== 'undefined') {%>
    pageConfig,
    <% } %>
    <% if (tabBarPath && isMPA) {%>
    TabBar,
    <% } %>
  }, {
    mount,
    unmount,
  });
};

export default {
  createBaseApp: frameworkAppBase,
  staticConfig,
  <% if (typeof pageConfig !== 'undefined') {%>
  pageConfig,
  <% } %>
}
