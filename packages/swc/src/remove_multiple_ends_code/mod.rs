use serde::{Deserialize, Serialize};
use swc_atoms::JsWord;
use swc_ecmascript::ast::{
    Ident, JSXAttr, JSXAttrName, JSXAttrOrSpread, JSXElementName, JSXOpeningElement,
};
use swc_ecmascript::visit::Fold;

#[derive(Debug, Deserialize, Default, Clone)]
pub struct RemoveMutipleEndsCode {
    pub platforms: Vec<String>,
}

/// Configuration related to source map generated by swc.
#[derive(Clone, Serialize, Deserialize, Debug)]
#[serde(untagged)]
pub enum RemoveMutipleEndsCodeConfig {
    Bool(bool),
    RemoveMutipleEndsCode { platforms: Vec<String> },
}

impl Default for RemoveMutipleEndsCodeConfig {
    fn default() -> Self {
        RemoveMutipleEndsCodeConfig::Bool(false)
    }
}

pub fn remove_multiple_ends_code(options: RemoveMutipleEndsCode) -> impl Fold {
    let platforms = options.platforms;
    RemoveMutipleEndsCode {
        platforms: platforms,
    }
}

impl Fold for RemoveMutipleEndsCode {
    fn fold_jsx_opening_element(&mut self, node: JSXOpeningElement) -> JSXOpeningElement {
        let JSXOpeningElement {
            name,
            mut attrs,
            span,
            self_closing,
            type_args,
        } = node;
        let n = name.clone();

        if let JSXElementName::Ident(Ident { sym, .. }) = name {
            if sym.starts_with("amp-") {
                for i in 0..attrs.len() {
                    if let JSXAttrOrSpread::JSXAttr(JSXAttr {
                        name:
                            JSXAttrName::Ident(Ident {
                                sym,
                                span: s,
                                optional: o,
                            }),
                        span,
                        value,
                    }) = &attrs[i]
                    {
                        if sym as &str == "className" {
                            attrs[i] = JSXAttrOrSpread::JSXAttr(JSXAttr {
                                name: JSXAttrName::Ident(Ident {
                                    sym: JsWord::from("class"),
                                    span: s.clone(),
                                    optional: o.clone(),
                                }),
                                span: span.clone(),
                                value: value.clone(),
                            })
                        }
                    }
                }
            }
        }

        JSXOpeningElement {
            name: n,
            attrs,
            span,
            self_closing,
            type_args,
        }
    }
}
