import './env.server';
import * as runtime from '@ice/runtime/server';
<% if (hydrate) {-%>
import { commons, statics } from './runtime-modules';
<% }-%>
import * as app from '@/app';
<% if (hasDocument) {-%>
import * as Document from '@/document';
<% } else { -%>
import * as Document from './document';
<% } -%>
import type { RenderMode, DistType } from '@ice/runtime';
import type { RenderToPipeableStreamOptions } from 'react-dom/server';
// @ts-ignore
import assetsManifest from 'virtual:assets-manifest.json';
<% if(rsc) {-%>
import { runRSCServerApp } from '@ice/runtime/rsc';
import clientManifest from 'virtual:react-client-manifest.json';
import ssrModuleMapping from 'virtual:react-ssr-module-mapping.json';
import rscModule from 'virtual-rsc-module:react-ssr-module-mapping.json';
<% }-%>
<% if (hydrate) {-%>
import createRoutes from './routes';
<% } else { -%>
import routesManifest from './route-manifest.json';
<% } -%>
import routesConfig from './routes-config.bundle.mjs';
<% if (dataLoaderImport.imports) {-%><%-dataLoaderImport.imports%><% } -%>
<% if (hydrate) {-%><%- runtimeOptions.imports %><% } -%>
<% if (!hydrate) {-%>
// Do not inject runtime modules when render mode is document only.
const commons = [];
const statics = [];
const createRoutes = () => routesManifest;
<% } -%>
const runtimeModules = { commons, statics };

const getRouterBasename = () => {
  const appConfig = runtime.getAppConfig(app);
  return appConfig?.router?.basename ?? <%- basename %> ?? '';
}

const setRuntimeEnv = (renderMode) => {
  if (renderMode === 'SSG') {
    process.env.ICE_CORE_SSG = 'true';
  } else {
    process.env.ICE_CORE_SSR = 'true';
  }
}

interface RenderOptions {
  documentOnly?: boolean;
  renderMode?: RenderMode;
  basename?: string;
  serverOnlyBasename?: string;
  routePath?: string;
  disableFallback?: boolean;
  distType?: DistType;
  publicPath?: string;
  serverData?: any;
  streamOptions?: RenderToPipeableStreamOptions;
}

<% if(rsc) {-%>
global._require_rsc_module = (id) => rscModule[id].default;
<% }-%>

export async function renderToHTML(requestContext, options: RenderOptions = {}) {
  const { renderMode = 'SSR' } = options;
  setRuntimeEnv(renderMode);

  const mergedOptions = mergeOptions(options);
  return await runtime.renderToHTML(requestContext, mergedOptions);
}

export async function renderToResponse(requestContext, options: RenderOptions = {}) {
  const { renderMode = 'SSR' } = options;
  setRuntimeEnv(renderMode);

  const mergedOptions = mergeOptions(options);

  <% if(rsc) {-%>
  return runRSCServerApp(requestContext, mergedOptions);
  <% } else { -%>
  return runtime.renderToResponse(requestContext, mergedOptions);
  <% }-%>
}

<% if (jsOutput) { -%>
export async function renderToEntry(requestContext, options: RenderOptions = {}) {
  const { renderMode = 'SSR' } = options;
  setRuntimeEnv(renderMode);

  const mergedOptions = mergeOptions(options);
  return await runtime.renderToEntry(requestContext, mergedOptions);
}
<% } -%>

function mergeOptions(options) {
  const { renderMode = 'SSR', basename, publicPath } = options;

  if (publicPath) {
    assetsManifest.publicPath = publicPath;
  }

  return {
    ...options,
    app,
    assetsManifest,
    createRoutes,
    runtimeModules,
    documentDataLoader: Document.dataLoader,
    Document: Document.default,
    basename: basename || getRouterBasename(),
    renderMode,
    routesConfig,
    <% if(rsc) {-%>
    clientManifest,
    ssrModuleMapping,
    <% }-%>
    <% if (hydrate) {-%>
    runtimeOptions: {
    <% if (runtimeOptions.exports) { -%>
      <%- runtimeOptions.exports %>
    <% } -%>
    <% if (locals.customRuntimeOptions) { _%>
    ...<%- JSON.stringify(customRuntimeOptions) %>,
    <% } _%>
    },
    <% } -%>
  };
}
