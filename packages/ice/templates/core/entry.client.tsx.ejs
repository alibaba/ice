<% if (importCoreJs) { -%>import 'core-js';<% } %>
<%- entry.imports %>
import { runClientApp, getAppConfig } from '<%- iceRuntimePath %>';
import { commons, statics } from './runtime-modules';
import * as app from '@/app';
<% if (routesFile) { -%>
import createRoutes from '<%- routesFile %>';
<% } -%>
<%- runtimeOptions.imports %>
<% if (dataLoaderImport.imports && hasDataLoader) {-%><%-dataLoaderImport.imports%><% } -%>
import type { RunClientAppOptions } from '@ice/runtime';

const getRouterBasename = () => {
  const appConfig = getAppConfig(app);
  return appConfig?.router?.basename ?? <%- basename %> ?? '';
}

const renderOptions: RunClientAppOptions = {
  app,
  runtimeModules: {
    commons,
    statics,
  },
  <% if (routesFile) { %>createRoutes,<% } %>
  basename: getRouterBasename(),
  hydrate: <%- hydrate %>,
  memoryRouter: <%- memoryRouter || false %>,
<% if (dataLoaderImport.imports && hasDataLoader) { -%>
  dataLoaderFetcher,
  dataLoaderDecorator,<% } -%>
  runtimeOptions: {
<% if (runtimeOptions.exports) { -%>
  <%- runtimeOptions.exports %>
<% } -%>
<% if (locals.customRuntimeOptions) { -%>...<%- JSON.stringify(customRuntimeOptions) %>,<% } -%>
  },
};

const mergeOptions = (customOptions: Partial<RunClientAppOptions> = {}): RunClientAppOptions => ({
  ...renderOptions,
  ...customOptions,
  runtimeOptions: {
    ...renderOptions.runtimeOptions,
    ...customOptions.runtimeOptions,
  },
});

const render = () => {
  return app.runApp?.(
    (customOptions: Partial<RunClientAppOptions> = {}) => {
      const options = mergeOptions(customOptions);
      return runClientApp(options);
    },
    renderOptions
  ) ?? runClientApp(renderOptions);
};

<%- entryCode %>

if (import.meta.webpackHot) {
  import.meta.webpackHot.accept();
}
