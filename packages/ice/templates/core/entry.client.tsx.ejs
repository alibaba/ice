<% if (importCoreJs) { -%>import 'core-js';<% } %>
import { createElement, Fragment } from 'react';
import { runClientApp, getAppConfig } from '<%- iceRuntimePath %>';
import { commons, statics } from './runtimeModules';
import * as app from '@/app';
<% if (enableRoutes) { -%>
import createRoutes from './routes';
<% } -%>
<%- runtimeOptions.imports %>
<% if(dataLoaderImport.imports) {-%><%-dataLoaderImport.imports%><% } -%>
const getRouterBasename = () => {
  const appConfig = getAppConfig(app);
  return appConfig?.router?.basename ?? <%- basename %> ?? '';
}
// Add react fragment for split chunks of app.
// Otherwise chunk of route component will pack @ice/jsx-runtime and depend on framework bundle.
const App = <></>;

<% if(!dataLoaderImport.imports) {-%>
let dataLoaderFetcher = (options) => {
  window.fetch(options.url, options);
}

let dataLoaderDecorator = (dataLoader) => {
  return dataLoader;
}
<% } -%>

const render = (customOptions: Record<string, any> = {}) => {
  const appProps = {
    app,
    runtimeModules: {
      commons,
      statics,
    },
    <% if (enableRoutes) { %>createRoutes,<% } %>
    basename: getRouterBasename(),
    hydrate: <%- hydrate %>,
    memoryRouter: <%- memoryRouter || false %>,
    dataLoaderFetcher,
    dataLoaderDecorator,
    ...customOptions,
    runtimeOptions: {
  <% if (runtimeOptions.exports) { -%>
    <%- runtimeOptions.exports %>
  <% } -%>
  <% if (locals.customRuntimeOptions) { -%>
  ...<%- JSON.stringify(customRuntimeOptions) %>,
  <% } -%>
      ...customOptions.runtimeOptions,
    },
  };
  return runClientApp(appProps);
};

<%- entryCode %>

if (import.meta.webpackHot) {
  import.meta.webpackHot.accept();
}
