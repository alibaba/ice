const util = require('util');

// example
// eslint-disable-next-line
`/**
 * 定义应用路由
 */
import React from 'react';
import {
  Router, Route, Redirect, IndexRoute, IndexRedirect,
  // browserHistory,
  hashHistory
} from 'react-router';

// 以下部分是由 ICE 相关工具自动生成的路由，请勿随意改变，否则可能会出现一些异常情况
// ---auto generated routes start---
_IMPORTS_
const autoGeneratedRoutes = _ROUTES_;
// ---auto generated routes end---

// 自定义路由，如果 path 相同则会覆盖自动生成部分的路由配置
const customRoutes = [];

export default (
  <Router
    history={hashHistory}
    routes={[...autoGeneratedRoutes, ...customRoutes]}
  />
);
`;
/**
 * 创建 react-router routes 文件
 * @param {String} dir
 * @param {Array} routes
 * "routes": [
    {
      "page": "Home",
      "path": "/",
      "layout": "BasicLayout"
    },
    {
      "redirect": "/more/filter-item",
      "path": "/more",
      "layout": "SidebarLayout"
    },
    {
      "page": "FilterItem",
      "path": "/more/filter-item",
      "layout": "SidebarLayout"
    },
    {
      "page": "FilterTable",
      "path": "/more/filter-table",
      "layout": "SidebarLayout"
    },
    {
      "page": "NotFound",
      "path": "*",
      "layout": "BasicLayout"
    }
  ]
 */
module.exports = function generateRouteFile(dir, routes) {
  const layouts = [];
  const imports =
    `${routes
      .map((route) => {
        // redirect 一类的没用
        let layoutImportStatement = '';
        if (route.page) {
          if (route.layout && !layouts.includes(route.layout)) {
            layouts.push(route.layout);
            layoutImportStatement = `import ${route.layout} from './layouts/${
              route.layout
            }';\n`;
          }
          return `${layoutImportStatement}import ${route.page} from './pages/${
            route.page
          }';`;
        }
        return '';
      })
      .join('\n')}\n`;

  const routeMap = {};
  routes.forEach((route) => {
    if (!route.path || route.path === '*') {
      routeMap['/'].childRoutes.push(
        createRouteNode({
          path: '*',
          layoutName: route.page,
        })
      );
      return;
    }
    if (route.path === '/') {
      routeMap['/'] = createRouteNode({
        path: '/',
        layoutName: route.layout,
        indexRouteComponent: route.page,
      });
      return;
    }
    const splited = route.path
      .replace(/^\//, '') // 去掉第一个 /
      .split('/');
    if (splited.length === 1) {
      routeMap[`/${splited[0]}`] = createRouteNode({
        path: `/${splited[0]}`,
        layoutName: route.layout,
        indexRouteComponent: route.page,
      });
    } else if (!routeMap[`/${splited[0]}`]) {
      routeMap[`/${splited[0]}`] = createRouteNode({
        path: `/${splited[0]}`,
        layoutName: route.layout,
        indexRouteComponent: route.page,
        childRoutes: [
          createRouteNode({
            path: splited.slice(1).join('/'),
            layoutName: route.page,
          }),
        ],
      });
    } else {
      routeMap[`/${splited[0]}`].childRoutes.push(
        createRouteNode({
          path: splited.slice(1).join('/'),
          layoutName: route.page,
        })
      );
    }
  });

  // todo route 生成算法
  const routeGenerated = Object.keys(routeMap)
    .map((key) => {
      return routeMap[key];
    })
    .sort((prev, curr) => {
      // '/' 放在最底下匹配
      return curr.path !== '/';
    });

  const routesResult = util
    .inspect(routeGenerated, {
      showHidden: false,
      depth: null,
    })
    // eslint-disable-next-line no-useless-escape
    .replace(/\'@@([a-zA-Z0-9]+)@@\'/g, ($1, $2) => {
      return $2;
    });
  // eslint-disable-next-line no-useless-escape
  const importsResult = imports.replace(/\'@@([a-zA-Z0-9]+)@@\'/g, ($1, $2) => {
    return $2;
  });

  return {
    imports: importsResult,
    routes: routesResult,
  };
};

const routeMap = {};
function createRouteNode({
  path,
  layoutName,
  indexRouteComponent,
  indexRouteRedirect,
  childRoutes,
}) {
  const result = {
    path,
    childRoutes: childRoutes || [],
  };

  if (layoutName) {
    result.component = `@@${layoutName}@@`;
  }
  if (indexRouteComponent) {
    result.indexRoute = Object.assign({}, result.indexRoute, {
      component: `@@${indexRouteComponent}@@`,
    });
  }
  if (indexRouteRedirect) {
    result.indexRoute = Object.assign({}, result.indexRoute, {
      redirect: indexRouteRedirect,
    });
  }

  routeMap[path] = result;
  return result;
}
